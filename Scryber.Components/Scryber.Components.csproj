<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;netstandard2.0</TargetFrameworks>
    <LangVersion>12.0</LangVersion>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>Scryber.snk</AssemblyOriginatorKeyFile>
    <PackageId>Scryber.Core</PackageId>
    <PackageVersion>6.0.5.0-beta</PackageVersion>
    <Authors>richard@paperworkday.com</Authors>
    <Copyright>Richard Hewitson 2024</Copyright>
    <License>LICENSE.md</License>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <Owners>richard@scryber.co.uk</Owners>
    <PackageProjectUrl>https://github.com/richard-scryber/scryber.core</PackageProjectUrl>
    <PackageReleaseNotes>
6.0.5.0-beta
Updated to net8.0 sdk and dependencies updated to latest version.

6.0.4.0-beta
Big updates to whitespace handling, support for &amp;nbsp; and hyphens in line breaks.

6.0.3.2-beta
Fix for prioritising parsing unit values in invariant culture on OS's set to non-invariant culture.

6.0.3.1-beta
Minor fix for transforming svg components (that do not have explict position values).

6.0.3.0-beta
Added fixes for parsing (x)html content on systems not running the english culture. All numeric values are expected to be in english decimal notation - e.g. 1,0234.56 for values in CSS, styles, svg etc.
Unit testing works for non-english. May be a couple of values / options missed but hoping not.
Added the AddRange option to top level component wrapping lists - (Rows, Cells, Items, etc.) that accepts an IEnumerable&lt;InnerType&gt; instance.

6.0.2.1-beta
Added fix for large inline images. Tested SaveAsPDFAsync.

6.0.1.1-alfa
Support for SaveAsPDFTimer, to check for asyncronous execution in a single threaded
application - blazor (or windows forms?), using asyncronous loading of http requests for css images, fonts etc).

6.0.1.0-beta

We now support html - in many of its flavours, through the HTMLAgilityPack

Added parsing non-formal html documents and components from local and remote files (using the ParseHtml and ParseHtmlDocument on the Document class)
Added the data-content and data-content-type attributes to visual components so that html and xhtml content can be data bound into pages.
Added support for the hyphens css property and it's use in hypenating long text.

6.0.0.16-beta

Some Big additions and fixes

Added support for the css counters (reset, increment and the counter(s) functions)
Added support for css content properties
Added support for css ::before and ::after selectors
Added support for relative units in styles e.g. 30% and 0.5em - not supported in calc() with multiple units e.g calc(50% - 5px) will not work.

A lot of layout tests to get everything working - precisely.


6.0.0.14-beta

Added support for transformations including css transform property.

6.0.0.12-beta

Changed the reference for ImageSharp to the 2.1.3 Nuget package, rather than the dll.
Checks added for support on thread culture in dates and numbers.

6.0.0.10-beta

Added support for Netwtonsoft.Json and the System.Text.Json objects in binding expressions and templates too.
Along with adding SoryBy, MaxOf, EachOf, SelectWhere collection functions.

6.0.0.5-beta

Updated to the .net 6.0 sdk, now with support for running as a web assembly with asyncronous loads of stylesheets, images and fonts.
Some TTC and TTF font files do not render glyfs correctly, but working for many fonts.

5.1.0.2-beta

A major update that now fully supports expressions in attributes, css var and clac along with text, using the handlebars notation - {{...}}
This includes support for simple mathematical expressions from the document variables as welll as functions such as 'concat', 'if(value, 'true', 'false')' or 'index() + model.property'

5.0.7

Adding support for the float left and right within blocks along with css linear and radial gradients

5.0.6.3

Fixes an issue with some TTF fonts on Windows (specifically azure) to look for the best character mapping table, and multi-span text not flowing well due to some changes to try and get float working.

5.0.6

The April release is a bit of a catch up and fix with updates for:

Supporting parsed JSON objects in binding - along with std types and dynamic objects.
margin:value is applied to all margins even if explicit left, right etc. has been previously applied.
Conformance is now carried through to templates, so errors are not indavertantly raised inside the template.
Missing background images will not raise an error.
Support for data images (src='data:image/..') within content - thanks Dan Rusu!
Images are not duplicated within the output for the same source.


5.0.5

Multiple enhancements including

Embed and iFrame support.
Binding speed improvements for longer documents.
Support for border-left, border-right, etc
Support for encryption and restrictions
Support for base href in template files.
Classes and styles on templates are supported.
Added em, strong, strike, del, ins elements
Html column width and break inside
CSS and HTML Logging
Fixed application of multiple styles with the same word inside
Allow missing images on the document is now supported.
Contain fill style for background images.

See: https://scrybercore.readthedocs.io/en/latest/version_history.html for a full break down.</PackageReleaseNotes>
    <Summary>The scryber engine for beautiful, dynamic, PDF document creation using html templates, css support and model injection in dotnet 6</Summary>
    <PackageTags>Scryber; PDF; dotnet core; HTML, HTML2PDF; dotnet 6;</PackageTags>
    <Title>Scryber</Title>
    <Description>The scryber pdf engine for dotnet 6 - Beautiful documents from templates made easy.

Scryber is an advanced PDF generation engine based around HTML templates with CSS styles and SVG drawing. It includes full flowing pages, dynamic template binding on your object model and referenced external files, images, css and fonts. Easily create documents from your Apps, MVC sites, or Javascipt ajax calls.

This framework is built entirely in .NET8 supporting Blazor and is released under the LGPL licence so you can use to it in commercial applications.</Description>
    <PackOnBuild>false</PackOnBuild>
    <RootNamespace>Scryber</RootNamespace>
    <Version>6.0.5.0-beta</Version>
    <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
    <PackageIcon>ScyberLogo2_alpha_small.png</PackageIcon>
    <RepositoryUrl>https://github.com/richard-scryber/scryber.core</RepositoryUrl>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <FileVersion>6.0.5.0</FileVersion>
    <RepositoryType>Git</RepositoryType>
    <PackageIconUrl>https://raw.githubusercontent.com/richard-scryber/scryber.core/master/ScyberLogo2_alpha_small.png</PackageIconUrl>
    <Configurations>Release;Debug</Configurations>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType></DebugType>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net6.0|AnyCPU'">
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2.0|AnyCPU'">
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0|AnyCPU'">
    <DebugType>portable</DebugType>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="Web\**" />
    <EmbeddedResource Remove="Web\**" />
    <None Remove="Web\**" />
    <None Include="..\ScyberLogo2_alpha_small.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Remove="PDF\" />
    <None Remove="PDF\Layout\" />
    <None Remove="PDF\Secure\" />
    <EmbeddedResource Remove="Properties\Resources.resx" />
    <Compile Remove="Properties\Resources.Designer.cs" />
    <Compile Remove="Data\SqlProviderCommand.cs" />
    <None Remove="Scryber.Styles" />
    <None Remove="Teronis.MSBuild.Packaging.ProjectBuildInPackage" />
    <None Remove="SixLabors.ImageSharp" />
    <None Remove="Options\" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="Class1.cs" />
    <Compile Remove="Errors.Designer.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="Resources\scryber_generatedby_bow.png" />
    <None Remove="Resources\scryber_generatedby_wob.png" />
    <None Remove="Resources\scryber_NotFoundLogo.png" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Scryber.Styles\Scryber.Styles.csproj">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Styles.dll</IncludeAssets>
    </ProjectReference>
    <ProjectReference Include="..\Scryber.Expressions\Scryber.Expressive.csproj">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Expressive.dll</IncludeAssets>
    </ProjectReference>
    <ProjectReference Include="..\Scryber.Imaging\Scryber.Imaging.csproj" PrivateAssets="all">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Imaging.dll</IncludeAssets>
        <IncludeAssets>SixLabors.ImageSharp.dll</IncludeAssets>
    </ProjectReference>
    <ProjectReference Include="..\Scryber.Common\Scryber.Common.csproj">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Common.dll</IncludeAssets>
    </ProjectReference>
    <ProjectReference Include="..\Scryber.Drawing\Scryber.Drawing.csproj">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Drawing.dll</IncludeAssets>
    </ProjectReference>
    <ProjectReference Include="..\Scryber.Generation\Scryber.Generation.csproj">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
        <IncludeAssets>Scryber.Generation.dll</IncludeAssets>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.Resources.Extensions" Version="8.0.0" />
    <PackageReference Include="SixLabors.ImageSharp" Version="2.1.8" />
    <PackageReference Include="HtmlAgilityPack" Version="1.11.61" />
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Resources\scryber_generatedby_bow.png">
      <LogicalName>scryber_generatedby_bow</LogicalName>
    </Resource>
    <Resource Include="Resources\scryber_generatedby_wob.png" />
    <Resource Include="Resources\scryber_NotFoundLogo.png" />
  </ItemGroup>
    
  <ItemGroup>
    <None Include="readme.txt" Pack="true">
      <IncludeInPackage>true</IncludeInPackage>
    </None>
    <None Include="LICENSE.md" Pack="true" PackagePath="$(PackageLicenseFile)">
      <IncludeInPackage>true</IncludeInPackage>
    </None>
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="Properties" />
    <Folder Include="Svg\Layout\" />
    <Folder Include="PDF\" />
    <Folder Include="PDF\Layout\" />
    <Folder Include="PDF\Secure\" />
    <Folder Include="Options\" />
  </ItemGroup>

  <Target DependsOnTargets="ResolveReferences" Name="CopyProjectReferencesToPackage">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>
</Project>
